Anotações Javascript:

No código apresentado, o objetivo é criar um botão que simula a funcionalidade de abrir o seletor de arquivos para 
o usuário carregar uma imagem, mas escondendo o elemento `<input type="file">` visualmente.

# Explicação do que foi feito:

1. *HTML:*

    <button id="upload-btn">Carregar imagem</button>
    <input type="file" id="imagem-upload" accept="image/" style="display: none;"/>

  - O botão `<button id="upload-btn">Carregar imagem</button>` serve como o elemento visível que o usuário clicará.
  - O `<input type="file" id="imagem-upload" style="display: none;">` é o campo de upload de arquivo, 
  mas está oculto por causa do estilo `display: none`.

2. *JavaScript:*

    const uploadBtn = document.getElementById("upload-btn");
    const inputUpload = document.getElementById("imagem-upload");

    uploadBtn.addEventListener("click", () => {
    inputUpload.click();
    })

  - `const uploadBtn = document.getElementById("upload-btn");`: Seleciona o botão no HTML.
  - `const inputUpload = document.getElementById("imagem-upload");`: Seleciona o campo de upload de arquivos.

3. *Evento de clique:*
  - `uploadBtn.addEventListener("click", () => { inputUpload.click(); });`:
    - Adiciona um ouvinte de evento ao botão.
    - Quando o botão é clicado, ele **dispara o método `.click()` no elemento escondido `<input>`**.
    - Isso abre o seletor de arquivos como se o usuário tivesse clicado diretamente no campo `<input type="file">`.


# Resultado:
- O botão "Carregar imagem" simula a funcionalidade de abrir o seletor de arquivos sem expor o elemento `<input type="file">` na interface.

----------------------------------------------------------------------------------------------------------------------------------

function lerConteudoDoArquivo(arquivo){
    return new Promise((resolve, reject) => {
        const leitor = new FileReader() //permite ler o conteúdo do arquivo;
        leitor.onload = () => {
            resolve({ url: leitor.result, nome: arquivo.name}) 
        }

        leitor.onerror = () => {
            reject(`Erro na leitura do arquivo ${arquivo.name}`)
        }

        leitor.readAsDataURL(arquivo)
    })
}

Função lerConteudoDoArquivo(arquivo)
Essa função tem o objetivo de ler o conteúdo de um arquivo (como imagens ou documentos) usando o FileReader, que é uma 
funcionalidade nativa do JavaScript para manipular arquivos no navegador.

Passo a passo:

1. return new Promise((resolve, reject) => {...})

• A função retorna uma Promise.
Uma Promise é como uma “promessa” de que algo será feito no futuro (neste caso, ler o arquivo).
• resolve: usado para retornar o resultado da leitura quando tudo dá certo.
• reject: usado para retornar um erro, caso algo dê errado.

2. const leitor = new FileReader()
• Cria um objeto do tipo FileReader que permite ler o conteúdo do arquivo fornecido.

3. leitor.onload = () => {...}
• Define o que acontece quando o arquivo é lido com sucesso.
• leitor.result: contém o conteúdo do arquivo (em formato de URL base64).
• arquivo.name: pega o nome do arquivo.
• O resultado e o nome do arquivo são enviados para o resolve.

4. leitor.onerror = () => {...}
• Define o que acontece se ocorrer um erro ao tentar ler o arquivo.
• reject: envia uma mensagem de erro com o nome do arquivo que falhou.

5. leitor.readAsDataURL(arquivo)
• Inicia a leitura do arquivo em formato Data URL (base64).
Esse formato é muito usado para exibir imagens no navegador.

Resumo:

Essa função lê um arquivo (como uma imagem) e retorna uma Promise.
• Se a leitura for bem-sucedida: o resultado da leitura (como uma URL) e o nome do arquivo são enviados no resolve.
• Se houver um erro: o reject é chamado com uma mensagem de erro.